Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  EnvironmentName:
    Description: "Udagram Environment Name"
    Type: "String"
    Default: "KeyPair"

  UdagramKey:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "Instances SSH key"
    Default: "KeyPair"

  BastionHostKey:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "BastionHost SSH key"

Resources:
  BastionSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "BastionHost Security Group"
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "tcp"
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  LBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "LoadBalancer Security Group"
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: "tcp"
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  ServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Server Security Group"
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: "tcp"
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "tcp"
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      

  UdagramLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: "ipv4"
      SecurityGroups:
      - !Ref LBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"

  UdagramLunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html
      AssociatePublicIpAddress: true
      ImageId: "ami-09d56f8956ab235b3"
      InstanceType: "t3.small"
      SecurityGroups:
      - !Ref ServerSecurityGroup
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: 10
          DeleteOnTermination: true
      

  UdagramGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchConfigurationName:
        Ref: UdagramLunchConfiguration
      MinSize: "4"
      MaxSize: "4"
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      TargetGroupARNs:
      - Ref: UdaTargetGroup

  UdaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: UdaTargetGroup
      LoadBalancerArn:
        Ref: UdagramLoadBalancer
      Port: 80
      Protocol: HTTP
  
  UdaListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref UdaTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref UdaListener
        Priority: 1

  UdaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-VPCID"
    

  BastionHostJumpBox:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: "ami-0022f774911c1d690"
      KeyName: !Ref "BastionHostKey"
      SubnetId:
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      SecurityGroupIds:
      - !Ref BastionSecGroup
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-BastionHost"
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  ProfileWithRolesForOurApp:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - "UdacityS3ReadOnlyEC2"

  UdagramS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "my-277609840384-udagram-bucket"
      AccessControl: "Private"
      VersioningConfiguration:
        Status: Enabled

Outputs:
  LoadBalancer:
    Description: "Load Balancer"
    Value: !Ref UdagramLoadBalancer

  LoadBalancerDnsName:
    Description: "Url to access load balancer"
    Value: !GetAtt UdagramLoadBalancer.DNSName
# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
